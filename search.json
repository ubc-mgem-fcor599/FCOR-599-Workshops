[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FCOR 599: Workshop Artifacts",
    "section": "",
    "text": "Home Page\nHey there,\nThis webpage contains workshop artifacts created by your FCOR 599 TA’s. Many of these artifacts were initially developed as workshops, and have been archived here for your reference. The topics range from cartography to advanced figure development and python scripting - most of which were requested by previous cohorts of your peers. If you have any questions, or have suggestions for additional modules that can be included here, please talk to your FCOR 599 teaching team.\n\n\n\nReuseCC BY 4.0",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "cartography.html",
    "href": "cartography.html",
    "title": "Cartography",
    "section": "",
    "text": "“All maps are lies, but some are useful” ~ Dr. Paul Pickell, circa 2020\nCartography is the art and science of creating, studying, and distributing maps and other visual representations of geographical areas. It involves a combination of scientific and artistic skills to communicate information about a place.\n\n\n\nEratosthenes’ World Map (220 BCE) showing the results of Alexander the Great’s conquests. Eratosthenes was the first geographer to include parallels and meridians in his maps, allowing for the calculation of distance.",
    "crumbs": [
      "Cartography"
    ]
  },
  {
    "objectID": "cartography.html#quarto",
    "href": "cartography.html#quarto",
    "title": "Cartography",
    "section": "",
    "text": "blah blah blah",
    "crumbs": [
      "Cartography"
    ]
  },
  {
    "objectID": "art_of_maps.html",
    "href": "art_of_maps.html",
    "title": "The Art of Map Making",
    "section": "",
    "text": "Lets add some text here about the history of maps. Some are very beautiful, some less so. Although we rightfully place emphasis on ensuring the scientific integrity of maps, the artistic component of map making is a key component of science communication, and should not be overlooked.",
    "crumbs": [
      "Cartography",
      "The Art of Map Making"
    ]
  },
  {
    "objectID": "cartography.html#what-is-cartography",
    "href": "cartography.html#what-is-cartography",
    "title": "Cartography",
    "section": "",
    "text": "Cartography is the art and science of creating, studying, and distributing maps and other visual representations of geographical areas. It involves a combination of scientific and artistic skills to communicate information about a place.",
    "crumbs": [
      "Cartography"
    ]
  },
  {
    "objectID": "arcgis_pro_demo.html",
    "href": "arcgis_pro_demo.html",
    "title": "ArcGIS Pro Demo",
    "section": "",
    "text": "As MGEM students, you all have access to ArcGIS Pro, a powerful GIS software that allows users to perform geospatial tasks and create beautiful maps. This demo focuses on the map-making capabilities of ArcGIS Pro, and provides an easy reference guide for the implementation of core cartography concepts and best-practices.",
    "crumbs": [
      "Cartography",
      "ArcGIS Pro Demo"
    ]
  },
  {
    "objectID": "interactive_maps.html",
    "href": "interactive_maps.html",
    "title": "Interactive Maps",
    "section": "",
    "text": "Although conventional maps are static and do not allow for user interaction, geospatial practitioners have developed exciting new ways in which we can present geographic information in interactive formats. Although not exhaustive by any means, this section will cover several key ways in which you can create digital maps that allow for user-interaction.",
    "crumbs": [
      "Interactive Maps"
    ]
  },
  {
    "objectID": "leaflet.html",
    "href": "leaflet.html",
    "title": "Leaflet",
    "section": "",
    "text": "The Basics:\nMany software and coding packages can be used to create interactive maps. In this particular demo, we will show you an easy way to produce interactive maps in leaflet - a popular R package. Leaflet is intuitive, fast, and has many arguments that allow us to easily adjust the way in which we present our maps. In the example below, we used NTEMs land cover from 2020 to product a simple interactive map for Vancouver Island. In the code below, you will notice that we add in a basemap using the ‘addProviderTiles’ argument. You can browse for available leaflet basemaps here: https://leaflet-extras.github.io/leaflet-providers/preview/\n\nl &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #lets use some base imagery from ESRI\n  addProviderTiles(\"Esri.WorldImagery\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024) %&gt;%\n  #add a legend\n  addRasterLegend(ntems2020, opacity = 1)%&gt;%\n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))\n\n\n\n\n\n\n\n \nComparing/Showing Multiple Layers:\nNow let’s step things up a notch, and add some additional content to our map. For the purposes of this demonstration, let’s say you have been tasked with showcasing changes in land cover on Vancouver Island from 2000 to 2020. To do so, we can use 2 key leaflet functionalities: 1) adding a toggle menu - allowing us to switch between layers, 2) adding a ‘slider’, which we can use to visualize two layers side-by-side.\n1) In order to add a toggle menu and provide NTEMs land cover of both 2000 and 2020 in our map, we do need to provide a name for our layers using the ‘group’ argument within the ‘addRasterImage’ function.\n\nl2 &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #lets use some base imagery from ESRI\n  addProviderTiles(\"Esri.WorldImagery\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2000\n  addRasterImage(ntems2000, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2000\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2020\") %&gt;%\n  \n  #allow for layers to be toggles on/off by adding them to the layers control\n  addLayersControl(baseGroups = c(\"LC-2000\",\"LC-2020\")) %&gt;%\n  \n  #add a legend\n  addRasterLegend(ntems2000, opacity = 1)%&gt;%\n  \n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))\n\n\n\n\n\n\n\n \n2) In order to visualize layers side-by-side and compare them using a window slider, we need to create a left and right pane, and assign our NTEMS land cover rasters to one of these panes.\n\nl3 &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #set up the two map panes\n  addMapPane(\"right\", zIndex = 1) %&gt;%\n  addMapPane(\"left\",  zIndex = 2) %&gt;%\n  \n  #add the ESRI basemap to both map panes\n  addProviderTiles(\"Esri.WorldImagery\", group = \"base\", layerId = \"baseid1\", options = pathOptions(pane = \"right\")) %&gt;%\n  addProviderTiles(\"Esri.WorldImagery\", group = \"base\", layerId = \"baseid2\", options = pathOptions(pane = \"left\")) %&gt;%\n  \n  #now lets add our NTEMS land cover from 2000\n  addRasterImage(ntems2000, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2000\",\n                 #assign to a pane\n                 options = leafletOptions(pane = \"left\")) %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2020\",\n                 #assign to a pane\n                 options = leafletOptions(pane = \"right\")) %&gt;%\n  \n  #allow for layers to be toggles on/off by adding them to the layers control\n  addLayersControl(overlayGroups = c(\"LC-2000\", \"LC-2020\")) %&gt;%\n  \n  #add slider control\n  addSidebyside(layerId = \"sidecontrols\",\n                rightId = \"baseid1\",\n                leftId  = \"baseid2\",\n                options = list(padding = 0)) %&gt;%\n  \n  #add a legend\n  addRasterLegend(ntems2000, opacity = 1)%&gt;%\n  \n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))",
    "crumbs": [
      "Interactive Maps",
      "Leaflet"
    ]
  },
  {
    "objectID": "Landing_Page/index.html",
    "href": "Landing_Page/index.html",
    "title": "FCOR 599: Workshop Artifacts",
    "section": "",
    "text": "Home Page\nHey there,\nThis webpage contains workshop artifacts created by your FCOR 599 TA’s. Many of these artifacts were initially developed as workshops, and have been archived here for your reference. The topics range from cartography to advanced figure development and python scripting - most of which were requested by previous cohorts of your peers. If you have any questions, or have suggestions for additional modules that can be included here, please talk to your FCOR 599 teaching team.\n\n\n\nReuseCC BY 4.0",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Cartography/arcgis_pro_demo.html",
    "href": "Cartography/arcgis_pro_demo.html",
    "title": "ArcGIS Pro Demo",
    "section": "",
    "text": "This section is under construction\nAs MGEM students, you all have access to ArcGIS Pro, a powerful GIS software that allows users to perform geospatial tasks and create beautiful maps. This demo focuses on the map-making capabilities of ArcGIS Pro, and provides an easy reference guide for the implementation of core cartography concepts and best-practices.",
    "crumbs": [
      "Cartography",
      "ArcGIS Pro Demo"
    ]
  },
  {
    "objectID": "Cartography/art_of_maps.html",
    "href": "Cartography/art_of_maps.html",
    "title": "The Art of Map Making",
    "section": "",
    "text": "This section is under construction\nLets add some text here about the history of maps. Some are very beautiful, some less so. Although we rightfully place emphasis on ensuring the scientific integrity of maps, the artistic component of map making is a key component of science communication, and should not be overlooked.",
    "crumbs": [
      "Cartography",
      "The Art of Map Making"
    ]
  },
  {
    "objectID": "Cartography/cartography.html",
    "href": "Cartography/cartography.html",
    "title": "Cartography",
    "section": "",
    "text": "This section is under construction\n“All maps are lies, but some are useful” ~ Dr. Paul Pickell, circa 2020\nCartography is the art and science of creating, studying, and distributing maps and other visual representations of geographical areas. It involves a combination of scientific and artistic skills to communicate information about a place.\n\n\n\nEratosthenes’ World Map (220 BCE) showing the results of Alexander the Great’s conquests. Eratosthenes was the first geographer to include parallels and meridians in his maps, allowing for the calculation of distance.",
    "crumbs": [
      "Cartography"
    ]
  },
  {
    "objectID": "Interactive_Maps/interactive_maps.html",
    "href": "Interactive_Maps/interactive_maps.html",
    "title": "Interactive Maps",
    "section": "",
    "text": "Although conventional maps are static and do not allow for user interaction, geospatial practitioners have developed exciting new ways in which we can present geographic information in interactive formats. Although not exhaustive by any means, this section will cover several key ways in which you can create digital maps that allow for user-interaction.",
    "crumbs": [
      "Interactive Maps"
    ]
  },
  {
    "objectID": "Interactive_Maps/leaflet.html",
    "href": "Interactive_Maps/leaflet.html",
    "title": "Leaflet",
    "section": "",
    "text": "The Basics:\nMany software and coding packages can be used to create interactive maps. In this particular demo, we will show you an easy way to produce interactive maps in leaflet - a popular R package. Leaflet is intuitive, fast, and has many arguments that allow us to easily adjust the way in which we present our maps. In the example below, we used NTEMs land cover from 2020 to product a simple interactive map for Vancouver Island. In the code below, you will notice that we add in a basemap using the ‘addProviderTiles’ argument. You can browse for available leaflet basemaps here: https://leaflet-extras.github.io/leaflet-providers/preview/\n\nl &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #lets use some base imagery from ESRI\n  addProviderTiles(\"Esri.WorldImagery\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024) %&gt;%\n  #add a legend\n  addRasterLegend(ntems2020, opacity = 1)%&gt;%\n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))\n\n\n\n\n\n\n\n \nComparing/Showing Multiple Layers:\nNow let’s step things up a notch, and add some additional content to our map. For the purposes of this demonstration, let’s say you have been tasked with showcasing changes in land cover on Vancouver Island from 2000 to 2020. To do so, we can use 2 key leaflet functionalities: 1) adding a toggle menu - allowing us to switch between layers, 2) adding a ‘slider’, which we can use to visualize two layers side-by-side.\n1) In order to add a toggle menu and provide NTEMs land cover of both 2000 and 2020 in our map, we do need to provide a name for our layers using the ‘group’ argument within the ‘addRasterImage’ function.\n\nl2 &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #lets use some base imagery from ESRI\n  addProviderTiles(\"Esri.WorldImagery\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2000\n  addRasterImage(ntems2000, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2000\") %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2020\") %&gt;%\n  \n  #allow for layers to be toggles on/off by adding them to the layers control\n  addLayersControl(baseGroups = c(\"LC-2000\",\"LC-2020\")) %&gt;%\n  \n  #add a legend\n  addRasterLegend(ntems2000, opacity = 1)%&gt;%\n  \n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))\n\n\n\n\n\n\n\n \n2) In order to visualize layers side-by-side and compare them using a window slider, we need to create a left and right pane, and assign our NTEMS land cover rasters to one of these panes.\n\nl3 &lt;- leaflet(width = 600, height = 600)%&gt;%\n  \n  #set up the two map panes\n  addMapPane(\"right\", zIndex = 1) %&gt;%\n  addMapPane(\"left\",  zIndex = 2) %&gt;%\n  \n  #add the ESRI basemap to both map panes\n  addProviderTiles(\"Esri.WorldImagery\", group = \"base\", layerId = \"baseid1\", options = pathOptions(pane = \"right\")) %&gt;%\n  addProviderTiles(\"Esri.WorldImagery\", group = \"base\", layerId = \"baseid2\", options = pathOptions(pane = \"left\")) %&gt;%\n  \n  #now lets add our NTEMS land cover from 2000\n  addRasterImage(ntems2000, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2000\",\n                 #assign to a pane\n                 options = leafletOptions(pane = \"left\")) %&gt;%\n  \n  #now lets add our NTEMS land cover from 2020\n  addRasterImage(ntems2020, \n                 #you can increase the allowable size of the rast here\n                 maxBytes = 10 * 1024 *1024,\n                 #provide a name for the layer\n                 group = \"LC-2020\",\n                 #assign to a pane\n                 options = leafletOptions(pane = \"right\")) %&gt;%\n  \n  #allow for layers to be toggles on/off by adding them to the layers control\n  addLayersControl(overlayGroups = c(\"LC-2000\", \"LC-2020\")) %&gt;%\n  \n  #add slider control\n  addSidebyside(layerId = \"sidecontrols\",\n                rightId = \"baseid1\",\n                leftId  = \"baseid2\",\n                options = list(padding = 0)) %&gt;%\n  \n  #add a legend\n  addRasterLegend(ntems2000, opacity = 1)%&gt;%\n  \n  #add scale bar\n  addScaleBar(position = c(\"bottomleft\"))",
    "crumbs": [
      "Interactive Maps",
      "Leaflet"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html",
    "href": "E-Portfolio/eportfolio.html",
    "title": "E-Portfolio",
    "section": "",
    "text": "As part of FCOR 599, you are required to produce a professional E-Portfolio. This portfolio is intended to capture the breadth of skills you have developed throughout the program, including scientific writing & reporting, figure design, cartography, coding, etc. As has been introduced in the E-Portfolio workshop, a portfolio is essentially an organized digital collection of artifacts that highlight key pieces of work, accomplishments and skills.",
    "crumbs": [
      "E-portfolio"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html#quarto",
    "href": "E-Portfolio/eportfolio.html#quarto",
    "title": "E-Portfolio",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "E-portfolio (Quarto)"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html#running-code",
    "href": "E-Portfolio/eportfolio.html#running-code",
    "title": "E-Portfolio",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "E-portfolio (Quarto)"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html#building-a-portfolio-in-quarto",
    "href": "E-Portfolio/eportfolio.html#building-a-portfolio-in-quarto",
    "title": "E-Portfolio",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org. In this module, we will be using Quarto to construct an E-portfolio. The key advantage of building your portfolio in Quarto is that you can easily integrate any workflow, results, figures etc. that you have created in R-Studio. This workshop repository itself was built in Quarto, and is hosted on Github. In order to build your own portfolio, we have put together a simple github repository that provides the basic files you will need. In order to interact with the repository and build your own e-portfolio using quarto and github, you will need the following:\n\nA github account.\nGithub deskptop (make sure you are logged in).\nR-Studio.\nThe sample repository (available here).",
    "crumbs": [
      "E-portfolio (Quarto)"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html#e-portfolio-basics",
    "href": "E-Portfolio/eportfolio.html#e-portfolio-basics",
    "title": "E-Portfolio",
    "section": "",
    "text": "As part of FCOR 599, you are required to produce a professional E-Portfolio. This portfolio is intended to capture the breadth of skills you have developed throughout the program, including scientific writing & reporting, figure design, cartography, coding, etc. As has been introduced in the E-Portfolio workshop, a portfolio is essentially an organized digital collection of artifacts that highlight key pieces of work, accomplishments and skills.",
    "crumbs": [
      "E-portfolio"
    ]
  },
  {
    "objectID": "E-Portfolio/eportfolio.html#building-an-e-portfolio-in-quarto",
    "href": "E-Portfolio/eportfolio.html#building-an-e-portfolio-in-quarto",
    "title": "E-Portfolio",
    "section": "Building an E-Portfolio in Quarto",
    "text": "Building an E-Portfolio in Quarto\nIn your E-Portfolio workshop, you were introduced to UBC blogs, where you can host a portfolio via wordpress. Since many of you are quite familiar with coding in R-studio at this stage in the pogram, the demo below will demonstrate how you can build a portfolio using Quarto in R-Studio. Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\nIn this module, we will be using Quarto to construct an E-portfolio. The key advantage of building your portfolio in Quarto is that you can easily integrate any workflow, results, figures etc. that you have created in R-Studio. This workshop repository itself was built in Quarto, and is hosted on Github. In order to build your own portfolio, we have put together a simple github repository that provides the basic files you will need. In order to interact with the repository and build your own e-portfolio using quarto and github, you will need the following:\n\nA github account.\nGithub deskptop (make sure you are logged in).\nR-Studio.\nThe sample repository (available here).\n\nQuarto Portfolio Instructions:\nBefore we begin, make sure you have Github desktop installed on your device, that you are logged in to your github account in the desktop app, and that you have R-Studio installed on your device.\n\nNavigate to the sample repository using the link above.\nNow ‘fork’ the repository - this will create a copy of all of the files on your github account. You can make changes to this ‘forked’ repository without affecting the original or getting things mixed up with your peers. Make sure you provide a descriptive name for the forked repo.\nOpen up your Github Desktop app and navigate to ‘File &gt; Clone Repository’. This will show you all of the repositories that are available to be cloned based on your github account. Find the forked repo and clone it to a local path. You will get a pop-up that asks you how you plan to use this fork - make sure you select the ‘for my own purposes’ option.\nIn the Github Desktop app, click on the ‘Show in Explorer’ button - this will navigate to the folder on your computer where all the repo files are stored. This folder is where you will make changes to your E-Portfolio files.\nOpen up an R-Studio session and click on ‘File &gt; Open File’. Navigate to your explorer folder with all of the repo files, and open up the ‘index.qmd’ file. Edit the file with your own profile picture (if you’d like), contact information, and introduction blurb. When you are finished editing the page, save the .qmd file and hit ‘render’. This will give you a preview of what the page will look like in your E-Portfolio. Repeat this step for the ‘resume.qmd’ file.\nIn your Github Desktop, you will now notice that there are local changes to the repository files based on your edits. You can push these edits to your github by clicking ‘commit to main’.\n\nIn order to customize your E-Portfolio, we encourage you to review the following resources:\n\nQuarto HTML Basics\nQuarto HTML Options\nQuarto Theming\n\nOnce you are satisfied with the content of your E-Portfolio, it is time to publish your website. Before you do so, make sure you have committed all local changes from your desktop. Once you are ready:\n\nOpen your github account in your web browser, and navigate to your E-Portfolio repository.\nIn the top bar, select ‘Settings’ and navigate to ‘Pages’ under the ‘Code and automation’ column.\nUnder ‘Build and deployment’ &gt; ‘Branch’, select the ‘Main’ branch, and click save.\nYour website is now being built. This will take a few minutes, so be patient and refresh the page after ~ 2-5 minutes. Once complete, a url for your website will now be available to you.",
    "crumbs": [
      "E-portfolio"
    ]
  }
]