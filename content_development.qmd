---
title: "Content Development"
format: html
editor: visual
---

During my time in the Faculty of Forestry, I have been involved in course and content development for both undergraduate and graduate programs. On this page, I have collected a few content "highlights".

# "Mixed Pixel" Field Exercise

Each year, the Master's of Geomatics for Environmental Management (MGEM) program from UBC Forestry visits the Malcolm Knapp Research Forest for an orientation retreat. During this retreat, students are introduced to core remote sensing concepts like the electromagnetic spectrum, spectral indices, and various satellite remote sensing platforms. As part of this orientation, students visit several 'field sites', where they observe what different spatial resolution pixels look like in real life. Through this exercise, students become familiar with the concept of 'mixed pixel problems'. The interactive map I developed is used by the students as they perform this exercise. Spatial resolutions of PlanetScope, Sentinel-2 and Landsat can be observed, and students are able to view 'True Color' and NDVI visualizations using the panel slider. To help navigate, the students also have the ability to toggle on their live GPS location, using their mobile devices.

To view the complete field lab, visit https://ramonmelser.github.io/MKRF_Map/

```{r setup, include=FALSE}

library(leaflet)
library(raster)
library(terra)
library(htmlwidgets)
library(htmltools)
library(leafem)
library(DT)
library(kableExtra)
library(leaflet.extras)
library(leaflet.extras2)


Planet <- rast("D:/Sync/MGEM_Loon_Lake/Planet_RGB.tif")
Sentinel <- rast("D:/Sync/MGEM_Loon_Lake/Sentinel_2_RGB.tif")
Landsat <- rast("D:/Sync/MGEM_Loon_Lake/Landsat_8_RGB.tif")

Plots <- vect("D:/Sync/MGEM_Loon_Lake/plots/MGEM_plots.shp")
Plots <- terra::project(Plots, "+init=EPSG:4326")

MKRF <- vect("D:/Sync/MGEM_Loon_Lake/Vector/mkrf_boundary.shp")
MKRF <- project(MKRF, crs(Planet))

##crop to MKRF
Planet <- crop(Planet, MKRF, mask = TRUE)
Sentinel <- crop(Sentinel, MKRF, mask = TRUE)
Landsat <- crop(Landsat, MKRF, mask = TRUE)

##Convert to brick for leaflet usage
Planet <- brick(Planet)
Sentinel <- brick(Sentinel)
Landsat <- brick(Landsat)
Landsat <- Landsat * 0.00000275

# Normalized Difference Vegetation Index (NDVI) Function
ndvi_func <- function(image, nir, red){
  ndvi <- (image[[nir]] - image[[red]]) / (image[[nir]] + image[[red]])
  return(ndvi)
}

# NDVI Creation
#(Note: the band numbers here are based on 4-band composites that only include RGB and NIR)
Planet_NDVI <- ndvi_func(Planet, 4, 3)
Planet_NDVI <- Planet_NDVI - 0.4
Planet_NDVI[Planet_NDVI < 0] <- 0

Landsat_NDVI <- ndvi_func(Landsat, 4, 3)
Landsat_NDVI[Landsat_NDVI < 0.02] <- -0.5
Landsat_NDVI <- Landsat_NDVI + 0.5

raster01 = function(r){

# get the min max values
  minmax_r = range(values(r), na.rm=TRUE) 

# rescale 
 return( (r-minmax_r[1]) / (diff(minmax_r)))
}

Sentinel_NDVI <- ndvi_func(Sentinel, 4, 3)
Sentinel_NDVI[Sentinel_NDVI < 0] <- 0



sentinel_pal <- colorNumeric(c("#FF0000", "#FFFF00", "#006400"),
                             values(Sentinel_NDVI),
                             na.color = "transparent")

landsat_pal <- colorNumeric(c("#FF0000", "#FFFF00", "#006400"),
                            values(Landsat_NDVI),
                            na.color = "transparent")

planet_pal <- colorNumeric(c("#FF0000", "#FFFF00", "#006400"),
                           values(Planet_NDVI),
                           na.color = "transparent")
b <- leaflet(Plots, width = 600, height = 600) %>%
  
  #set up the two map panes
  addMapPane("right", zIndex = 1) %>%
  addMapPane("left",  zIndex = 2) %>%
  addTiles(group = "base", layerId = "baseid1", options = pathOptions(pane = "right")) %>%
  addTiles(group = "base", layerId = "baseid2", options = pathOptions(pane = "left")) %>%
  
  ##add plot points and enable labels
  addMarkers(group = "Plots", label = ~htmlEscape(Name))%>%
  
  ##add Landsat RGB and NDVI
  addRasterRGB(x = Landsat, 3,2,1,
               quantiles = c(0.02, 0.98), domain = NULL,
               options = leafletOptions(pane = "left"), group = "Landsat") %>%
  
  addRasterImage(x = Landsat_NDVI, colors = landsat_pal,
                 options = leafletOptions(pane = "right"), group = "Landsat") %>%
  
  ##add Sentinel RGB and NDVI
  addRasterRGB(x = Sentinel, 3,2,1,,
               quantiles = c(0.02, 0.98), domain = NULL,
               options = leafletOptions(pane = "left"), group = "Sentinel") %>%
  
  addRasterImage(x = Sentinel_NDVI, colors = sentinel_pal,
                 options = leafletOptions(pane = "right"), group = "Sentinel") %>%
  
  ##add Planet RGB and NDVI
  #large files may require you to play with the maxBytes option
    addRasterRGB(x = Planet, 3,2,1,,
              quantiles = c(0.02, 0.98), domain = NULL,
               options = leafletOptions(pane = "left"), group = "Planet",
               maxBytes = 11269792) %>%
  
  addRasterImage(x = Planet_NDVI, colors = planet_pal,
                 options = leafletOptions(pane = "right"), group = "Planet",
                 maxBytes = 11269792) %>%
  
  ##Set layer controls and enable side by side panel split
  addLayersControl(baseGroups = c("Landsat", "Sentinel", "Planet"),
                   overlayGroups = c("Plots")) %>%
  
  addSidebyside(layerId = "sidecontrols",
                rightId = "baseid1",
                leftId  = "baseid2",
                options = list(padding = 0)) %>%
  
  ##Add scale bar and enable GPS live location
  addScaleBar(position = c("bottomleft")) %>%
  addControlGPS(options = gpsOptions(position = "topleft", activate = TRUE,
                                     autoCenter = TRUE, maxZoom = 10,
                                     setView = TRUE))

```

```{r map, echo=FALSE}
b
```

## A title

```{=html}
<iframe width="780" height="500" src="https://melserramon.users.earthengine.app/view/thermal" title="Webpage example"></iframe>
```
